!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADSIZE	function.h	13;"	d
AD_PORT	basetype.h	30;"	d
AD_down	function.cpp	/^unsigned int deamon::AD_down(AD_flag flag, char *data)$/;"	f	class:deamon
AD_flag	Serial.h	/^} AD_flag;$/;"	t	typeref:enum:tag_Flag
CC	Makefile	/^CC = g++$/;"	m
CHAR	basetype.h	/^typedef char CHAR;$/;"	t
CXXFLAGS	Makefile	/^CXXFLAGS = -g$/;"	m
ERRORNUM	function.cpp	/^}ERRORNUM;$/;"	t	typeref:enum:tagErrorNum	file:
ERRORSTR	function.cpp	/^char *ERRORSTR[] = $/;"	v
E_ACQINFO	function.cpp	/^	E_ACQINFO,$/;"	e	enum:tagErrorNum	file:
E_BUTT	function.cpp	/^	E_BUTT,$/;"	e	enum:tagErrorNum	file:
E_DOWN	function.cpp	/^	E_DOWN,$/;"	e	enum:tagErrorNum	file:
E_INVALID	function.cpp	/^	E_INVALID = 0,$/;"	e	enum:tagErrorNum	file:
GTEST_DIR	test/Makefile	/^GTEST_DIR = \/home\/kent\/gtest$/;"	m
GTEST_HEADERS	test/Makefile	/^GTEST_HEADERS = $(GTEST_DIR)\/include\/gtest\/*.h \\$/;"	m
GTEST_SRCS_	test/Makefile	/^GTEST_SRCS_ = $(GTEST_DIR)\/src\/*.cc $(GTEST_DIR)\/src\/*.h $(GTEST_HEADERS)$/;"	m
INT	basetype.h	/^typedef int INT;$/;"	t
LONG	basetype.h	/^typedef long LONG;$/;"	t
MAX_DATALEN	basetype.h	31;"	d
PAGESIZE	test/stub/stub.c	12;"	d	file:
PARAIGNORE	basetype.h	35;"	d
RX	dns.cpp	/^ULONG rasp_connector::RX(UCHAR *buffer, ULONG bufsize)$/;"	f	class:rasp_connector
SHORT	basetype.h	/^typedef short SHORT;$/;"	t
STATIC	basetype.h	5;"	d
STATIC	basetype.h	7;"	d
SetUp	test/dns_test.cc	/^void UT_DNS::SetUp()$/;"	f	class:UT_DNS
TESTS	test/Makefile	/^TESTS = ut$/;"	m
TEST_F	test/dns_test.cc	/^TEST_F(UT_DNS, 001)$/;"	f
TX	dns.cpp	/^ULONG rasp_connector::TX(UCHAR *buffer, ULONG bufsize)$/;"	f	class:rasp_connector
TearDown	test/dns_test.cc	/^void UT_DNS::TearDown()$/;"	f	class:UT_DNS
UCHAR	basetype.h	/^typedef unsigned char UCHAR;$/;"	t
UINT	basetype.h	/^typedef unsigned int UINT;$/;"	t
ULONG	basetype.h	/^typedef unsigned long ULONG;$/;"	t
USER_DIR	test/Makefile	/^USER_DIR = ..$/;"	m
USHORT	basetype.h	/^typedef unsigned short USHORT;$/;"	t
UT_DNS	test/dns_test.cc	/^class UT_DNS : public ::testing::Test {$/;"	c	file:
__BASET__	basetype.h	2;"	d
___PARAIGNORE	basetype.h	36;"	d
acquire	function.cpp	/^unsigned long deamon::acquire()$/;"	f	class:deamon
ad_len	function.h	/^		ULONG ad_len;							\/* post信息的长度 *\/$/;"	m	class:deamon
address_p	test/dns_test.cc	/^char address_p[20];$/;"	v
advertise	function.h	/^		UCHAR advertise[ADSIZE];				\/* 用于保存post信息 *\/$/;"	m	class:deamon
ar_serial	Serial.cpp	/^ar_serial::ar_serial(char *Port_name)$/;"	f	class:ar_serial
ar_serial	Serial.h	/^class ar_serial{$/;"	c
conect_t	test/dns_test.cc	/^int conect_t;$/;"	v
connect_stub	test/dns_test.cc	/^int connect_stub(int sockfd, struct sockaddr *addr, socklen_t addrlen)$/;"	f
connector	function.h	/^		rasp_connector *connector;					\/* 需要一个和服务器的连接器 *\/$/;"	m	class:deamon
data	basetype.h	/^	UCHAR data[MAX_DATALEN];$/;"	m	struct:tag_pack
data	test/stub/stub.h	/^	unsigned char data[10];$/;"	m	struct:fun_stub
deamon	function.cpp	/^deamon::deamon()$/;"	f	class:deamon
deamon	function.h	/^class deamon$/;"	c
domainname	dns.h	/^	CHAR domainname[40];$/;"	m	class:rasp_connector
exchange	dns.cpp	/^unsigned int rasp_connector::exchange(CHAR *hostname, UCHAR *buffer, ULONG bufsize)$/;"	f	class:rasp_connector
fd_sock	dns.h	/^	INT fd_sock;$/;"	m	class:rasp_connector
flag_butt	Serial.h	/^	flag_butt,$/;"	e	enum:tag_Flag
flag_default	Serial.h	/^	flag_default = 0,$/;"	e	enum:tag_Flag
flag_print	Serial.h	/^	flag_print,$/;"	e	enum:tag_Flag
fun_stub	test/stub/stub.h	/^typedef struct fun_stub {$/;"	s
fun_stub	test/stub/stub.h	/^} fun_stub;$/;"	t	typeref:struct:fun_stub
function	test/stub/stub.h	/^	void * function;$/;"	m	struct:fun_stub
length	basetype.h	/^	USHORT length;$/;"	m	struct:tag_pack
pack	basetype.h	/^typedef struct tag_pack pack;$/;"	t	typeref:struct:tag_pack
post	Serial.cpp	/^unsigned int ar_serial::post(int data_len, char *data)$/;"	f	class:ar_serial
private	basetype.h	11;"	d
protected	basetype.h	12;"	d
rasp_connector	dns.cpp	/^rasp_connector::rasp_connector()$/;"	f	class:rasp_connector
rasp_connector	dns.h	/^class rasp_connector $/;"	c
stub	test/dns_test.cc	/^		struct fun_stub stub[10];$/;"	m	class:UT_DNS	typeref:struct:UT_DNS::fun_stub	file:
stub_reset	test/stub/stub.c	/^void stub_reset(fun_stub * target)$/;"	f
stub_set	test/stub/stub.c	/^void stub_set(fun_stub *tmp, void *func, void * func_stub)$/;"	f
tagErrorNum	function.cpp	/^typedef enum tagErrorNum {$/;"	g	file:
tag_Flag	Serial.h	/^typedef enum tag_Flag {$/;"	g
tag_pack	basetype.h	/^struct tag_pack {$/;"	s
timeout	dns.cpp	/^STATIC struct timeval timeout;$/;"	v	typeref:struct:timeval
type	basetype.h	/^	USHORT type;$/;"	m	struct:tag_pack
wired	dns.h	/^	bool wired;$/;"	m	class:rasp_connector
wireto	dns.cpp	/^void rasp_connector::wireto(const CHAR *hostname)$/;"	f	class:rasp_connector
~ar_serial	Serial.cpp	/^ar_serial::~ar_serial()$/;"	f	class:ar_serial
~deamon	function.cpp	/^deamon::~deamon()$/;"	f	class:deamon
~rasp_connector	dns.cpp	/^rasp_connector::~rasp_connector()$/;"	f	class:rasp_connector
